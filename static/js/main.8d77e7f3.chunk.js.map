{"version":3,"sources":["redux/initialState.js","redux/reducers.js","redux/types.js","redux/actions.js","config.js","components/user-form.js","components/user-input.js","components/bot-sentence.js","components/user-sentence.js","components/chat.js","components/menu.js","App.js","redux/store.js","serviceWorker.js","index.js","img/rain.jpg"],"names":["test","key","user","name","icon","open","chat","party","time","Date","toLocaleString","content","combineReducers","state","initialState","action","type","text","question","answer","changeUserName","changeUserIcon","tweakUserDialog","submitUserQuestion","restartChat","submitForChatbotAnswer","payload","dispatch","axios","post","then","response","data","catch","error","message","useStyles","makeStyles","theme","form","display","flexDirection","justifyContent","alignItems","margin","spacing","width","title","textAlign","inputLabel","formControl","connect","bindActionCreators","actions","classes","Dialog","DialogTitle","Typography","variant","className","TextField","label","defaultValue","onChange","evt","target","value","FormControl","InputLabel","id","Select","labelId","MenuItem","Button","color","onClick","userInputRoot","backgroundColor","marginBottom","inputGroup","textField","profile","useState","setQuestion","Paper","onKeyDown","keyCode","iconIndex","getUserIcon","BotSentenceStyle","indent","sentence","maxWidth","avatar","palette","getContrastText","deepPurple","minWidth","timeWrapper","typography","button","fontSize","BotSentence","Fragment","elevation","Avatar","maxHeight","red","height","root","overflow","marginTop","scroll1","scroll2","overflowY","paddingRight","boxSizing","ctns","useEffect","messageBody","document","querySelector","scrollTop","scrollHeight","clientHeight","scrollToBottom","map","generateChatView","menuRoot","homeButton","blue","refreshButton","orange","Tooltip","aria-label","window","location","href","createMuiTheme","status","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","reduxImmutableStateInvariant","configureStore","appStyles","mainView","minHeight","backgroundImage","WindowImage","menu","chatWindow","userInput","App","ThemeProvider","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.8d77e7f3.chunk.js","sourcesContent":["export default {\r\n  test: {\r\n    key: \"value\",\r\n  },\r\n  user: {\r\n    name: \"Guest\",\r\n    icon: 2,\r\n    open: true,\r\n  },\r\n  chat: [\r\n    {\r\n      party: \"bot\",\r\n      time: new Date().toLocaleString(),\r\n      content:\r\n        \"Let's talk! Feel free to ask me anything :) I'm smart, kind of..\",\r\n    },\r\n  ],\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport * as types from \"./types\";\r\nimport initialState from \"./initialState\";\r\n\r\nconst testReducer = (state = initialState.test, action) => {\r\n  switch (action.type) {\r\n    case types.TEST:\r\n      return { ...state, key: action.text };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst userReducer = (state = initialState.user, action) => {\r\n  switch (action.type) {\r\n    case types.CHANGE_USER_NAME:\r\n      return { ...state, name: action.name };\r\n    case types.CHANGE_USER_ICON:\r\n      return { ...state, icon: action.icon };\r\n    case types.TWEAK_USER_DIALOG:\r\n      return { ...state, open: action.open };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst chatReducer = (state = initialState.chat, action) => {\r\n  switch (action.type) {\r\n    case types.SUBMIT_USER_QUESTION:\r\n      return [\r\n        ...state,\r\n        {\r\n          party: \"user\",\r\n          time: new Date().toLocaleString(),\r\n          content: action.question,\r\n        },\r\n      ];\r\n    case types.GET_CHATBOT_ANSWER:\r\n      return [\r\n        ...state,\r\n        {\r\n          party: \"bot\",\r\n          time: new Date().toLocaleString(),\r\n          content: action.answer,\r\n        },\r\n      ];\r\n    case types.RESTART_CHAT:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// root reducer\r\nexport default combineReducers({\r\n  // format - name of the state section : reducer function\r\n  test: testReducer,\r\n  user: userReducer,\r\n  chat: chatReducer,\r\n});\r\n","export const TEST = \"TEST\";\r\n\r\nexport const CHANGE_USER_NAME = \"CHANGE_USER_NAME\";\r\nexport const CHANGE_USER_ICON = \"CHANGE_USER_ICON\";\r\nexport const TWEAK_USER_DIALOG = \"TWEAK_USER_DIALOG\";\r\n\r\nexport const SUBMIT_USER_QUESTION = \"SUBMIT_USER_QUESTION\";\r\nexport const GET_CHATBOT_ANSWER = \"GET_CHATBOT_ANSWER\";\r\nexport const RESTART_CHAT = \"RESTART_CHAT\";\r\n","import * as types from \"./types\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport { apiHost } from \"../config\";\r\n\r\nexport const changeText = (text) => {\r\n  return { type: types.TEST, text };\r\n};\r\n\r\nexport const changeUserName = (name) => {\r\n  return { type: types.CHANGE_USER_NAME, name };\r\n};\r\n\r\nexport const changeUserIcon = (icon) => {\r\n  return { type: types.CHANGE_USER_ICON, icon };\r\n};\r\n\r\nexport const tweakUserDialog = (open) => {\r\n  return { type: types.TWEAK_USER_DIALOG, open };\r\n};\r\n\r\nexport const submitUserQuestion = (question) => {\r\n  return { type: types.SUBMIT_USER_QUESTION, question };\r\n};\r\n\r\nexport const restartChat = () => {\r\n  return { type: types.RESTART_CHAT };\r\n};\r\n\r\nexport const submitForChatbotAnswer = (payload) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .post(apiHost, { question: payload })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: types.GET_CHATBOT_ANSWER,\r\n          answer: response.data.answer,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.message && error.message === \"Network Error\") {\r\n          dispatch({\r\n            type: types.GET_CHATBOT_ANSWER,\r\n            answer: \"It seems I'm not here at the moment\",\r\n          });\r\n        }\r\n      });\r\n  };\r\n};\r\n","export const apiHost = \"http://localhost:8888/\";\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport AdbIcon from \"@material-ui/icons/Adb\";\r\nimport AnnouncementIcon from \"@material-ui/icons/Announcement\";\r\nimport DirectionsRunIcon from \"@material-ui/icons/DirectionsRun\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: theme.spacing(1),\r\n    width: 225,\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n  },\r\n  inputLabel: {\r\n    textAlign: \"center\",\r\n    width: 200,\r\n  },\r\n  formControl: {\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst UserFormComponent = ({\r\n  name,\r\n  icon,\r\n  open,\r\n  changeUserName,\r\n  changeUserIcon,\r\n  tweakUserDialog,\r\n  ...props\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Dialog open={open}>\r\n      <DialogTitle>\r\n        <Typography variant={\"subtitle1\"} className={classes.title}>\r\n          Chatbot Settings\r\n        </Typography>\r\n      </DialogTitle>\r\n      <div className={classes.form}>\r\n        <TextField\r\n          label=\"User Nickname\"\r\n          defaultValue={name}\r\n          className={classes.inputLabel}\r\n          onChange={(evt) => changeUserName(evt.target.value)}\r\n        />\r\n        <br />\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"user-icon\">Choose your user icon</InputLabel>\r\n          <Select\r\n            labelId=\"user-icon\"\r\n            id=\"user-icon\"\r\n            value={icon}\r\n            onChange={(evt) => changeUserIcon(evt.target.value)}\r\n          >\r\n            <MenuItem value={1}>\r\n              <GitHubIcon /> - the git master\r\n            </MenuItem>\r\n            <MenuItem value={2}>\r\n              <AdbIcon /> - droid expert\r\n            </MenuItem>\r\n            <MenuItem value={3}>\r\n              <AnnouncementIcon /> - not without surprise\r\n            </MenuItem>\r\n            <MenuItem value={4}>\r\n              <DirectionsRunIcon /> - in a rush\r\n            </MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <br />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => tweakUserDialog(false)}\r\n        >\r\n          Confirm\r\n        </Button>\r\n        <br />\r\n      </div>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    name: state.user.name,\r\n    icon: state.user.icon,\r\n    open: state.user.open,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    changeUserName: bindActionCreators(actions.changeUserName, dispatch),\r\n    changeUserIcon: bindActionCreators(actions.changeUserIcon, dispatch),\r\n    tweakUserDialog: bindActionCreators(actions.tweakUserDialog, dispatch),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserFormComponent);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport InputIcon from \"@material-ui/icons/Input\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport AdbIcon from \"@material-ui/icons/Adb\";\r\nimport AnnouncementIcon from \"@material-ui/icons/Announcement\";\r\nimport DirectionsRunIcon from \"@material-ui/icons/DirectionsRun\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  userInputRoot: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"azure\",\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  inputGroup: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  textField: {\r\n    width: \"250px\",\r\n  },\r\n  profile: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nconst getUserIcon = (iconIndex) => {\r\n  switch (iconIndex) {\r\n    case 1:\r\n      return <GitHubIcon />;\r\n    case 2:\r\n      return <AdbIcon />;\r\n    case 3:\r\n      return <AnnouncementIcon />;\r\n    case 4:\r\n      return <DirectionsRunIcon />;\r\n    default:\r\n      return <GitHubIcon />;\r\n  }\r\n};\r\n\r\nconst TextComponent = ({\r\n  name,\r\n  icon,\r\n  submitUserQuestion,\r\n  submitForChatbotAnswer,\r\n  ...props\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [question, setQuestion] = useState(\"\");\r\n\r\n  const onKeyPress = (evt) => {\r\n    if (evt.keyCode === 13) {\r\n      submitUserQuestion(question);\r\n      setQuestion(\"\");\r\n      submitForChatbotAnswer(question);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.userInputRoot}>\r\n      <div className={classes.inputGroup}>\r\n        &nbsp;\r\n        <InputIcon />\r\n        &nbsp;\r\n        <TextField\r\n          label=\"Enter\"\r\n          className={classes.textField}\r\n          value={question}\r\n          onChange={(evt) => setQuestion(evt.target.value)}\r\n          onKeyDown={onKeyPress}\r\n        ></TextField>\r\n      </div>\r\n      <div className={classes.profile}>\r\n        <Typography variant=\"caption\">{name}</Typography>\r\n        {getUserIcon(icon)}\r\n      </div>\r\n      &nbsp;\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    name: state.user.name,\r\n    icon: state.user.icon,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    submitUserQuestion: bindActionCreators(\r\n      actions.submitUserQuestion,\r\n      dispatch\r\n    ),\r\n    submitForChatbotAnswer: bindActionCreators(\r\n      actions.submitForChatbotAnswer,\r\n      dispatch\r\n    ),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TextComponent);\r\n","import React from \"react\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { deepPurple } from \"@material-ui/core/colors\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst BotSentenceStyle = makeStyles((theme) => ({\r\n  indent: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  sentence: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    maxWidth: \"85%\",\r\n  },\r\n  profile: {\r\n    //   display: \"flex\",\r\n    //   flexDirection: \"column\",\r\n    //   justifyContent: \"flex-start\",\r\n    //   alignItems: \"center\",\r\n    //   maxHeight: \"50px\",\r\n  },\r\n  avatar: {\r\n    color: theme.palette.getContrastText(deepPurple[500]),\r\n    backgroundColor: deepPurple[500],\r\n  },\r\n  content: {\r\n    // border: \"blue solid 1px\",\r\n    minWidth: \"60%\",\r\n  },\r\n  timeWrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  time: {\r\n    ...theme.typography.button,\r\n    fontSize: \"10px\",\r\n  },\r\n}));\r\n\r\nconst BotSentence = ({ time, sentence }) => {\r\n  const classes = BotSentenceStyle();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.indent}>\r\n        <div elevation={2} className={classes.profile}>\r\n          {/*<Typography variant=\"caption\">sushuiyuzhou</Typography>*/}\r\n          <Avatar className={classes.avatar}>\r\n            <GitHubIcon />\r\n          </Avatar>\r\n        </div>\r\n        &nbsp;\r\n        <div>\r\n          <Paper elevation={2} className={classes.sentence}>\r\n            &nbsp;\r\n            <div className={classes.content}>\r\n              <div className={classes.timeWrapper}>\r\n                <Typography\r\n                  variant=\"caption\"\r\n                  color=\"secondary\"\r\n                  className={classes.time}\r\n                >\r\n                  {time}\r\n                </Typography>\r\n              </div>\r\n              <Typography variant=\"body2\">{sentence}</Typography>\r\n            </div>\r\n            &nbsp;\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n      <br />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BotSentence;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport AdbIcon from \"@material-ui/icons/Adb\";\r\nimport AnnouncementIcon from \"@material-ui/icons/Announcement\";\r\nimport DirectionsRunIcon from \"@material-ui/icons/DirectionsRun\";\r\nimport { red } from \"@material-ui/core/colors\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst BotSentenceStyle = makeStyles((theme) => ({\r\n  indent: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  sentence: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n    maxWidth: \"70%\",\r\n  },\r\n  profile: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    maxHeight: \"50px\",\r\n  },\r\n  content: {\r\n    // border: \"blue solid 1px\",\r\n  },\r\n  timeWrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  time: {\r\n    ...theme.typography.button,\r\n    fontSize: \"10px\",\r\n  },\r\n  avatar: {\r\n    color: theme.palette.getContrastText(red[400]),\r\n    backgroundColor: red[400],\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n  icon: {\r\n    width: theme.spacing(2),\r\n    height: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst BotSentence = ({ time, sentence, icon }) => {\r\n  const classes = BotSentenceStyle();\r\n\r\n  const getUserIcon = (iconIndex) => {\r\n    switch (iconIndex) {\r\n      case 1:\r\n        return <GitHubIcon className={classes.icon} />;\r\n      case 2:\r\n        return <AdbIcon className={classes.icon} />;\r\n      case 3:\r\n        return <AnnouncementIcon className={classes.icon} />;\r\n      case 4:\r\n        return <DirectionsRunIcon className={classes.icon} />;\r\n      default:\r\n        return <GitHubIcon className={classes.icon} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.indent}>\r\n        <Paper elevation={2} className={classes.sentence}>\r\n          &nbsp;\r\n          <div className={classes.content}>\r\n            <div className={classes.timeWrapper}>\r\n              <Typography\r\n                variant=\"caption\"\r\n                fontSize=\"small\"\r\n                color=\"secondary\"\r\n                className={classes.time}\r\n              >\r\n                {time}\r\n              </Typography>\r\n            </div>\r\n            <Typography variant=\"body2\">{sentence}</Typography>\r\n          </div>\r\n          &nbsp;\r\n        </Paper>\r\n        &nbsp;\r\n        <Avatar className={classes.avatar}>{getUserIcon(icon)}</Avatar>\r\n      </div>\r\n      <br />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    icon: state.user.icon,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BotSentence);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport BotSentence from \"./bot-sentence\";\r\nimport UserSentence from \"./user-sentence\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"450px\",\r\n    overflow: \"auto\",\r\n    marginTop: \"5px\",\r\n  },\r\n  scroll1: {\r\n    width: \"100%\",\r\n    height: \"75vh\",\r\n    overflow: \"hidden\",\r\n  },\r\n  scroll2: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    overflowY: \"scroll\",\r\n    paddingRight:\r\n      \"17px\" /* Increase/decrease this value for cross-browser compatibility */,\r\n    boxSizing: \"content-box\" /* So the width will be 100% + 17px */,\r\n  },\r\n}));\r\n\r\nconst generateChatView = (ctns) => {\r\n  if (ctns) {\r\n    return ctns.map((chat) => {\r\n      if (chat.party === \"bot\") {\r\n        return <BotSentence time={chat.time} sentence={chat.content} />;\r\n      } else {\r\n        return <UserSentence time={chat.time} sentence={chat.content} />;\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst ChatWindowComponent = ({ ctns, ...props }) => {\r\n  const classes = useStyles();\r\n\r\n  const scrollToBottom = () => {\r\n    const messageBody = document.querySelector(\"#chat-window\");\r\n    messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [ctns]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.scroll1}>\r\n        <div id=\"chat-window\" className={classes.scroll2}>\r\n          {generateChatView(ctns)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ctns: state.chat,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    submitUserQuestion: bindActionCreators(\r\n      actions.submitUserQuestion,\r\n      dispatch\r\n    ),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChatWindowComponent);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { blue, orange } from \"@material-ui/core/colors\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  menuRoot: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n    alignItems: \"center\",\r\n    height: \"100%\",\r\n    width: \"150px\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  homeButton: {\r\n    color: theme.palette.getContrastText(blue[500]),\r\n    backgroundColor: blue[500],\r\n  },\r\n  refreshButton: {\r\n    color: theme.palette.getContrastText(orange[500]),\r\n    backgroundColor: orange[500],\r\n  },\r\n}));\r\n\r\nconst TextComponent = ({ restartChat, ...props }) => {\r\n  const classes = useStyles();\r\n\r\n  const redirectToGithub = () => {\r\n    window.location.href = \"https://github.com/sushuiyuzhou\";\r\n  };\r\n\r\n  return (\r\n    <div className={classes.menuRoot}>\r\n      <Tooltip title=\"To Github\" aria-label=\"home\">\r\n        <Avatar onClick={redirectToGithub} className={classes.homeButton}>\r\n          <HomeIcon />\r\n        </Avatar>\r\n      </Tooltip>\r\n      <Tooltip title=\"Restart chat\" aria-label=\"refresh\">\r\n        <Avatar onClick={restartChat} className={classes.refreshButton}>\r\n          <RefreshIcon />\r\n        </Avatar>\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    restartChat: bindActionCreators(actions.restartChat, dispatch),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TextComponent);\r\n","import React from \"react\";\n\nimport configureStore from \"./redux/store\";\nimport { Provider as ReduxProvider } from \"react-redux\";\n\nimport {\n  createMuiTheme,\n  makeStyles,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport UserForm from \"./components/user-form\";\nimport UserInput from \"./components/user-input\";\nimport ChatWindow from \"./components/chat\";\nimport Menu from \"./components/menu\";\n\nimport WindowImage from \"./img/rain.jpg\";\n\nconst theme = createMuiTheme({\n  status: {},\n});\n\nconst store = configureStore();\n\nconst appStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"grey\",\n    // backgroundImage: `url(${WindowImage})`,\n  },\n  mainView: {\n    width: \"100%\",\n    maxWidth: \"600px\",\n    minHeight: \"96vh\", // fill the screen by default\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    // backgroundColor: \"#b2ebf2\",\n    backgroundImage: `url(${WindowImage})`,\n    margin: \"1vh\",\n  },\n  menu: {\n    height: \"6vh\",\n  },\n  chatWindow: {\n    height: \"80vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  userInput: {\n    height: \"10vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst App = () => {\n  const classes = appStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ReduxProvider store={store}>\n        <div className={classes.root}>\n          <Paper elevation={3} className={classes.mainView}>\n            <UserForm />\n            <div className={classes.menu}>\n              <Menu />\n            </div>\n            <div className={classes.chatWindow}>\n              <ChatWindow />\n            </div>\n            <div className={classes.userInput}>\n              <UserInput />\n            </div>\n          </Paper>\n        </div>\n      </ReduxProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n// configureStore\r\nexport default (initialState) => {\r\n  const composeEnhancers =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // add support for Redux dev tools\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/rain.84ff5913.jpg\";"],"sourceRoot":""}